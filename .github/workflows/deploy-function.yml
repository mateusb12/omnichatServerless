name: Deploy Cloud Function

on:
  push:
    branches:
      - main  # Adjust to your main branch name.

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      CURRENT_BUCKET: pizza_code_bucket
      SDK_TYPE: ${{ secrets.SDK_TYPE }}
      SDK_PROJECT_ID: ${{ secrets.SDK_PROJECT_ID }}
      SDK_PRIVATE_KEY_ID: ${{ secrets.SDK_PRIVATE_KEY_ID }}
      SDK_PRIVATE_KEY: ${{ secrets.SDK_PRIVATE_KEY }}
      SDK_CLIENT_EMAIL: ${{ secrets.SDK_CLIENT_EMAIL }}
      SDK_CLIENT_ID: ${{ secrets.SDK_CLIENT_ID }}
      SDK_CLIENT_X509_CERT_URL: ${{ secrets.SDK_CLIENT_X509_CERT_URL }}
      FIREBASE_DATABASE_URL: ${{ secrets.FIREBASE_DATABASE_URL }}
      FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
      FIREBASE_USERNAME: ${{ secrets.FIREBASE_USERNAME }}
      FIREBASE_PASSWORD: ${{ secrets.FIREBASE_PASSWORD }}
      SEND_GMAIL_USERNAME: ${{ secrets.SEND_GMAIL_USERNAME }}
      SEND_GMAIL_APP_PASSWORD: ${{ secrets.SEND_GMAIL_APP_PASSWORD }}
      TEST_SECRET: ${{ secrets.TEST_SECRET }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Configure AWS CLI
        run: aws configure set region us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: docker-lambda
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update AWS Lambda function
        run: |
          aws lambda update-function-code --function-name demoContainerImage --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        env:
          IMAGE_TAG: latest
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: docker-lambda
          AWS_REGION: us-east-2
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Delete old images from Amazon ECR
        run: |
          # Get the list of image digests, sorted by creation date
          ALL_IMAGES=$(aws ecr describe-images --repository-name docker-lambda --query 'sort_by(imageDetails,&imagePushedAt)[*].imageDigest' --output text)
      
          # Exclude the latest image from the list
          OLD_IMAGES=$(echo "$ALL_IMAGES" | head -n -1)
      
          # Delete the images
          for image in $OLD_IMAGES; do
            aws ecr batch-delete-image --repository-name docker-lambda --image-ids imageDigest=$image
          done
        env:
          AWS_REGION: us-east-2
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}